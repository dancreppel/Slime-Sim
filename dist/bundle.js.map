{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/creature.js","webpack:///./src/entity.js","webpack:///./src/game.js","webpack:///./src/index.js","webpack:///./src/map.js","webpack:///./src/slime.js","webpack:///./src/util.js"],"names":["Creature","options","image","src","numMoves","movementDir","moveDirs","movementSpeed","entities","sandbox","speed","n","m","prevPos","pos","prevHitboxPos","hitboxCenter","Math","ceil","random","randIndex","floor","length","invalidPos","outOfBounds","Entity","dim","Image","hitboxRadius","ctx","drawImage","dx","dy","map","_","i","entity","distance","sqrt","minDistance","some","isCollision","Game","DIM_X","DIM_Y","creatures","moveDirX","moveDirY","player","Slime","sandBox","Map","height","wall","outside","concat","inanimateEntities","mouse","numType","type","xRange","rightBound","leftBound","yRange","bottomBound","topBound","xOffset","yOffset","randPos","Util","newCreature","push","clearRect","draw","forEach","creature","setKeyBinds","createPlayer","generateMap","generateEntities","generateEnemies","setInterval","render","move","aiMovement","checkCollision","eat","dead","console","log","document","addEventListener","e","preventDefault","key","horKeys","verKeys","includes","reverse","movement","canvas","getElementById","getContext","width","game","start","wallEntities","floorTiles","background","createBorder","boundary","createFloor","createOutside","createInanimateEntities","spacing","tile","j","offset","treeDim","numTrees","newTree","enemies","enemy","eatable","grow","enemyVolume","pow","PI","playerVolume","newVolume","newRadius","randXPos","randYPos"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import Entity from './entity';\n\nexport default class Creature extends Entity {\n  constructor(options) {\n    super(options);\n    // default to left facing sprite\n    this.image.src = this.src + \"-left.png\";\n\n    this.numMoves = 0;\n    this.movementDir = \"\";\n    this.moveDirs = [\"up\", \"down\", \"left\", \"right\"];\n  }\n\n  // // ! for testing\n  // draw(ctx) {\n  //   ctx.drawImage(\n  //     this.image,\n  //     this.pos[0],\n  //     this.pos[1],\n  //     this.dim[0],\n  //     this.dim[1]\n  //   );\n\n  //   this.drawHitbox();\n  // }\n\n  movement(movementSpeed, entities, sandbox) {\n    // ai movement\n    const speed = movementSpeed / 10;\n    const n = 50;\n    const m = 100;\n    // make copies of previous pos and hitbox\n    const prevPos = [...this.pos];\n    const prevHitboxPos = [...this.hitboxCenter];\n    // allow number of moves to be between n and n + m\n    if (this.numMoves === 0) {\n      this.numMoves = Math.ceil(Math.random() * m) + n;\n      let randIndex = Math.floor(Math.random() * this.moveDirs.length);\n      this.movementDir = this.moveDirs[randIndex];\n    } else {\n      this.numMoves--;\n      switch (this.movementDir) {\n        case \"up\":\n          this.pos[1] -= speed;\n          this.hitboxCenter[1] -= speed;\n          break;\n        case \"down\":\n          this.pos[1] += speed;\n          this.hitboxCenter[1] += speed;\n          break;\n        case \"left\":\n          this.pos[0] -= speed;\n          this.hitboxCenter[0] -= speed;\n          // orient sprite left facing\n          this.image.src = this.src + \"-left.png\";\n          break;\n        case \"right\":\n          this.pos[0] += speed;\n          this.hitboxCenter[0] += speed;\n          // orient sprite right facing\n          this.image.src = this.src + \"-right.png\";\n        default:\n          break;\n      }\n      if(this.invalidPos(entities) || sandbox.outOfBounds(this)) {\n        this.pos = prevPos;\n        this.hitboxCenter = prevHitboxPos;\n      }\n    }\n  }\n}","export default class Entity {\n  constructor(options) {\n    // pos is an array with x and y coordinates [x, y]\n    this.pos = options.pos;\n    // dim is an array with width and height [width, height]\n    this.dim = options.dim;\n    this.image = new Image();\n    this.src = options.src;\n    this.image.src = this.src;\n\n    // Instantiate hitbox\n    this.hitboxCenter = this.hitboxCenter();\n    this.hitboxRadius = this.hitboxRadius();\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.image,\n      this.pos[0],\n      this.pos[1],\n      this.dim[0],\n      this.dim[1]\n    );\n\n    // ! for testing\n    // this.drawHitbox();\n  }\n\n  move(dx, dy) {\n    this.pos[0] += dx;\n    this.pos[1] += dy;\n    this.hitboxCenter[0] += dx;\n    this.hitboxCenter[1] += dy;\n  }\n\n  hitboxCenter() {\n    let hitboxCenter = this.pos.map((_, i) => this.pos[i] + this.dim[i] / 2);\n    return hitboxCenter;\n  }\n\n  hitboxRadius() {\n    return this.dim[0] < this.dim[1] ? this.dim[0] / 2 : this.dim[1] / 2;\n  }\n\n  // // ! for testing\n  // drawHitbox() {\n  //   const canvas = document.getElementById(\"canvas\");\n  //   const ctx = canvas.getContext(\"2d\");\n  //   ctx.beginPath();\n  //   ctx.arc(\n  //     this.hitboxCenter[0],\n  //     this.hitboxCenter[1],\n  //     this.hitboxRadius,\n  //     0,\n  //     2 * Math.PI,\n  //     false\n  //   );\n  //   ctx.stroke();\n\n  //   return true;\n  // }\n\n  isCollision(entity) {\n    let dx = this.hitboxCenter[0] - entity.hitboxCenter[0];\n    let dy = this.hitboxCenter[1] - entity.hitboxCenter[1];\n    let distance = Math.sqrt(dx * dx + dy * dy);\n    let minDistance = this.hitboxRadius + entity.hitboxRadius;\n\n    if (distance < minDistance) return true;\n    else return false;\n  }\n\n  invalidPos(entities) {\n    return entities.some(entity => this.isCollision(entity))\n  }\n}","import Entity from './entity';\nimport Creature from './creature'\nimport Slime from './slime';\nimport Map from './map';\nimport * as Util from \"./util\";\n\nexport default class Game {\n  constructor (options) {\n    this.DIM_X = options.DIM_X;\n    this.DIM_Y = options.DIM_Y;\n    this.ctx = options.ctx;\n    this.movementSpeed = options.movementSpeed;\n    this.entities = [];\n    this.creatures = [];\n    this.moveDirX = 0;\n    this.moveDirY = 0;\n\n  }\n\n  createPlayer () {\n    // center pos in the middle of the canvas object\n    let pos = [this.DIM_X / 2, this.DIM_Y / 2];\n    this.player = new Slime({\n      pos,\n      dim: [30, 30],\n      src: \"assets/sprites/slime.png\"\n    });\n  }\n\n  generateMap () {\n    this.sandBox = new Map({\n      player: this.player,\n      height: 6000,\n      wall: \"assets/sprites/rock.png\",\n      floor: \"assets/sprites/grass.png\",\n      outside: \"assets/sprites/dirt.jpg\",\n    });\n  }\n\n  generateEntities () {\n    // add inanimate objects like trees to entities array\n    this.entities = this.entities.concat(this.sandBox.inanimateEntities);\n  }\n\n  generateEnemies () {\n    let creatures = {\n      mouse: {dim: 20, src: 'assets/sprites/mouse'}\n    }\n\n    const entities = this.entities.concat(this.player);\n\n    let numType = 20;\n    for(const type in creatures) {\n      let dim = creatures[type].dim;\n      let src = creatures[type].src;\n      const xRange = this.sandBox.rightBound - this.sandBox.leftBound - dim;\n      const yRange = this.sandBox.bottomBound - this.sandBox.topBound - dim;\n      let i = 1;\n      while(i < numType) {\n        const xOffset = this.sandBox.leftBound;\n        const yOffset = this.sandBox.topBound;\n        const randPos = Util.randPos(xRange, yRange, xOffset, yOffset);\n        const newCreature = new Creature ({\n          pos: randPos,\n          dim: [dim, dim],\n          src: src\n        });\n        // const invalidPos = entities.some(entity => \n        //   newCreature.isCollision(entity)\n        // );\n        // only push new creature to creatures array if it is in a valid pos\n        if (!newCreature.invalidPos(entities)) {\n          this.creatures.push(newCreature);\n          i++;\n        }\n      }\n    }\n  }\n\n  render (ctx) {\n    ctx.clearRect(0, 0, this.DIM_X, this.DIM_Y);\n    this.sandBox.draw(ctx);\n    this.entities.forEach(entity => entity.draw(ctx));\n    this.creatures.forEach(creature => creature.draw(ctx));\n    this.player.draw(ctx);\n  }\n\n  start () {\n    this.setKeyBinds();\n    this.createPlayer();\n    this.generateMap();\n    this.generateEntities();\n    this.generateEnemies();\n    // refresh 60 times per second\n    setInterval(() => {\n      this.render(this.ctx);\n      // regular move\n      this.move(false);\n      this.aiMovement();\n      // if a collision occurs, reverse move\n      if (this.checkCollision() || this.sandBox.outOfBounds(this.player)) {\n        this.move(true);\n      }\n      this.player.eat(this.creatures);\n      if (this.player.dead) console.log('game over');\n    }, 17)\n  }\n\n  setKeyBinds () {\n    // handle keydownfor arrow keys\n    document.addEventListener('keydown', e => {\n      e.preventDefault();\n      let speed = this.movementSpeed ;\n      switch (e.key) {\n        case 'ArrowUp':\n          this.moveDirY = speed;\n          break;\n        case 'ArrowDown':\n          this.moveDirY = -speed;\n          break;\n        case 'ArrowLeft':\n          this.moveDirX = speed;\n          break;\n        case 'ArrowRight':\n          this.moveDirX = -speed;\n          break;\n        default:\n          break;\n      }\n    });\n\n    // handle keyup for arrow keys\n    document.addEventListener('keyup', e => {\n      e.preventDefault();\n      const horKeys = ['ArrowLeft', 'ArrowRight'];\n      const verKeys = ['ArrowUp', 'ArrowDown']; \n\n      if (horKeys.includes(e.key)) {\n        this.moveDirX = 0;\n      }\n\n      if (verKeys.includes(e.key)) {\n        this.moveDirY = 0;\n      }\n    })\n  }\n\n  move (reverse) {\n    // * testing\n    if (reverse) {\n      this.entities.forEach((entity) =>\n        entity.move(-this.moveDirX, -this.moveDirY)\n      );\n\n      this.creatures.forEach((creature) =>\n        creature.move(-this.moveDirX, -this.moveDirY)\n      );\n\n      this.sandBox.move(-this.moveDirX, -this.moveDirY);\n    } else {\n      this.entities.forEach((entity) =>\n        entity.move(this.moveDirX, this.moveDirY)\n      );\n\n      this.creatures.forEach((creature) =>\n        creature.move(this.moveDirX, this.moveDirY)\n      );\n\n      this.sandBox.move(this.moveDirX, this.moveDirY);\n    }\n  }\n\n  checkCollision () {\n    return this.entities.some(entity => entity.isCollision(this.player));\n  }\n\n  aiMovement () {\n    this.creatures.forEach(creature => \n      creature.movement(this.movementSpeed, this.entities, this.sandBox)\n    );\n  }\n}","import Game from './game';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById('canvas');\n  const DIM_X = 1600;\n  const DIM_Y = 900;\n  const ctx = canvas.getContext('2d');\n  const movementSpeed = 10;\n\n  canvas.width = DIM_X;\n  canvas.height = DIM_Y;\n  \n  let game = new Game({\n    DIM_X,\n    DIM_Y,\n    ctx,\n    movementSpeed\n  });\n  \n  game.start();\n});","import Entity from './entity';\nimport * as Util from './util';\n\nexport default class Map {\n  constructor (options) {\n    this.player = options.player;\n    this.height = options.height;\n    // pass in src for wall object and floor\n    this.wall = options.wall;\n    this.floor = options.floor;\n    this.outside = options.outside;\n\n    this.wallEntities = [];\n    this.floorTiles = [];\n    this.background = [];\n    this.inanimateEntities = [];\n\n    // instantiate the following\n    this.createBorder();\n    this.boundary();\n    this.createFloor();\n    this.createOutside();\n    this.createInanimateEntities();\n  }\n\n  createBorder () {\n    let n = 20;\n    this.spacing = this.height / n;\n    let spacing = this.spacing;\n\n    for(let i = 0; i < n; i++) {\n      // left border\n      this.wallEntities.push(\n        new Entity ({\n          pos: [0, i * spacing],\n          dim: [spacing, spacing],\n          src: this.wall\n        })\n      ) ;\n\n      // right border\n      this.wallEntities.push(\n        new Entity ({\n          pos: [this.height, i * spacing + spacing],\n          dim: [spacing, spacing],\n          src: this.wall\n        })\n      );\n\n      // top border\n      this.wallEntities.push(\n        new Entity({\n          pos: [i * spacing + spacing, 0],\n          dim: [spacing, spacing],\n          src: this.wall,\n        })\n      );\n\n      // bottom border\n      this.wallEntities.push(\n        new Entity({\n          pos: [i * spacing, this.height],\n          dim: [spacing, spacing],\n          src: this.wall,\n        })\n      );\n    }\n  }\n\n  draw (ctx) {\n    this.background.forEach(tile => tile.draw(ctx));\n    this.floorTiles.forEach(tile => tile.draw(ctx));\n    this.wallEntities.forEach(entity => entity.draw(ctx));\n  }\n\n  boundary () {\n    // Bounds are determined by their X or Y values\n    // ex: X = 0 or Y = 10\n    // top bound in terms of Y\n    this.topBound = this.spacing;\n    // right bound in terms of X\n    this.rightBound = this.height;\n    // bottom bound in terms of Y\n    this.bottomBound = this.height;\n    // left bound in terms of X\n    this.leftBound = this.spacing;\n  }\n\n  move (dx, dy) {\n    // adjust bounds\n    this.topBound += dy;\n    this.rightBound += dx;\n    this.bottomBound += dy;\n    this.leftBound += dx;\n    \n    // adjust pos for each tile\n    this.floorTiles.forEach(tile => tile.move(dx, dy));\n    // adjust pos for each wall object\n    this.wallEntities.forEach(entity => entity.move(dx, dy));\n    this.background.forEach(tile => tile.move(dx, dy));\n  }\n\n  outOfBounds (entity) {\n    // check if entity's hitbox is above top bound\n    if (entity.hitboxCenter[1] - entity.hitboxRadius < this.topBound) return true;\n    // check if entity's hitbox is below bottom bound\n    if (entity.hitboxCenter[1] + entity.hitboxRadius > this.bottomBound) return true;\n    // check if entity's hitbox is out of left bound\n    if (entity.hitboxCenter[0] - entity.hitboxRadius < this.leftBound) return true;\n    // check if entity's hitbox is out of right bound\n    if (entity.hitboxCenter[0] + entity.hitboxRadius > this.rightBound) return true;\n    // otherwise\n    return false;\n  }\n\n  createFloor () {\n    // n x n grass tiles\n    let n = 20;\n    let dim = this.height / n;\n    let xOffset = this.spacing / 2;\n    let yOffset = this.spacing * .8;\n    for(let i = 0; i < n; i++) {\n      for(let j = 0; j < n; j++) {\n        this.floorTiles.push(\n          new Entity({\n            pos: [i * dim + xOffset, j * dim + yOffset],\n            dim: [dim, dim],\n            src: this.floor,\n          })\n        );\n      }\n    }\n  }\n\n  createOutside () {\n    let n = 50;\n    let offset = 900;\n    let dim = (this.height + 2 * offset) / n;\n\n    for(let i = 0; i < n; i++) {\n      for(let j = 0; j < n; j++) {\n        // manually found best size, this prevents drawing too many assets\n        // optimized for 5000+ height\n        if (i < 8 || j < 8 || i > 42 || j > 42)\n        this.background.push(\n          new Entity({\n            pos: [i * dim - offset, j * dim - offset],\n            dim: [dim, dim],\n            src: this.outside,\n          })\n        );\n      }\n    }\n  }\n\n  createInanimateEntities () {\n    // randomly place n trees\n    let treeDim = 300;\n    let numTrees = 30;\n    let xRange = this.rightBound - this.leftBound - treeDim;\n    let yRange = this.bottomBound - this.topBound - treeDim;\n\n    for(let i = 0; i < numTrees; i++) {\n      let randPos = Util.randPos(xRange, yRange, this.leftBound, this.topBound);\n      const entities = this.inanimateEntities.concat(this.player);\n      let newTree = new Entity({\n        pos: [randPos[0], randPos[1]],\n        dim: [treeDim, treeDim],\n        src: 'assets/sprites/tree.png'\n      });\n\n      // if the tree overlaps the player or other tree redo iteration\n      let invalidPos = entities.some(entity => newTree.isCollision(entity));\n      if (invalidPos) i--;\n      else this.inanimateEntities.push(newTree);\n      \n    }\n  }\n}","import Entity from './entity';\n\nexport default class Slime extends Entity {\n  constructor (options) {\n    super(options);\n  }\n  \n  move () {\n    // Do not move because the player should be in the center of the frame of\n    // reference\n  }\n\n  eat (enemies) {\n    enemies.forEach((enemy, i) => {\n      if (this.eatable(enemy)) {\n        this.grow(enemy);\n        // remove enemy\n        delete enemies[i];\n      }\n    });\n  }\n\n  eatable (enemy) {\n    let dx = this.hitboxCenter[0] - enemy.hitboxCenter[0];\n    let dy = this.hitboxCenter[1] - enemy.hitboxCenter[1];\n    let distance = Math.sqrt(dx * dx + dy * dy);\n    let minDistance = this.hitboxRadius;\n\n    if (distance < minDistance && this.hitboxRadius < enemy.hitboxRadius) {\n      this.dead = true;\n    }\n\n    if (distance < minDistance && this.hitboxRadius > enemy.hitboxRadius) {\n      return true;\n    } else return false;\n  }\n\n  grow (enemy) {\n    let enemyVolume = Math.pow(enemy.hitboxRadius, 3) * Math.PI * 4 / 3;\n    let playerVolume = Math.pow(this.hitboxRadius, 3) * Math.PI * 4 / 3;\n    let newVolume = enemyVolume + playerVolume;\n    let newRadius = Math.pow(newVolume / Math.PI * 3 / 4, 1 / 3);\n    // apply new radius\n    this.hitboxRadius = newRadius;\n    // apply new dimensions using diameter\n    this.dim = [newRadius * 2, newRadius * 2];\n    // adjust hitbox center\n    this.hitboxCenter = this.pos.map((_, i) => this.pos[i] + this.dim[i] / 2);\n  }\n}","export const randPos = (xRange, yRange, xOffset, yOffset) => {\n  let randPos = [];\n  let randXPos = Math.random() * xRange + xOffset;\n  randPos.push(randXPos);\n  let randYPos = Math.random() * yRange + yOffset;\n  randPos.push(randYPos);\n  return randPos;\n}"],"sourceRoot":""}